/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MatchmakingRequestService } from "../matchmakingRequest.service";
import { MatchmakingRequestCreateInput } from "./MatchmakingRequestCreateInput";
import { MatchmakingRequest } from "./MatchmakingRequest";
import { MatchmakingRequestFindManyArgs } from "./MatchmakingRequestFindManyArgs";
import { MatchmakingRequestWhereUniqueInput } from "./MatchmakingRequestWhereUniqueInput";
import { MatchmakingRequestUpdateInput } from "./MatchmakingRequestUpdateInput";

export class MatchmakingRequestControllerBase {
  constructor(protected readonly service: MatchmakingRequestService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MatchmakingRequest })
  async createMatchmakingRequest(
    @common.Body() data: MatchmakingRequestCreateInput
  ): Promise<MatchmakingRequest> {
    return await this.service.createMatchmakingRequest({
      data: {
        ...data,

        game: data.game
          ? {
              connect: data.game,
            }
          : undefined,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        createdAt: true,

        game: {
          select: {
            id: true,
          },
        },

        gameLookup: true,
        id: true,
        requestCreatedAt: true,
        requestStatus: true,
        status: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },

        userLookup: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MatchmakingRequest] })
  @ApiNestedQuery(MatchmakingRequestFindManyArgs)
  async matchmakingRequests(
    @common.Req() request: Request
  ): Promise<MatchmakingRequest[]> {
    const args = plainToClass(MatchmakingRequestFindManyArgs, request.query);
    return this.service.matchmakingRequests({
      ...args,
      select: {
        createdAt: true,

        game: {
          select: {
            id: true,
          },
        },

        gameLookup: true,
        id: true,
        requestCreatedAt: true,
        requestStatus: true,
        status: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },

        userLookup: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MatchmakingRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async matchmakingRequest(
    @common.Param() params: MatchmakingRequestWhereUniqueInput
  ): Promise<MatchmakingRequest | null> {
    const result = await this.service.matchmakingRequest({
      where: params,
      select: {
        createdAt: true,

        game: {
          select: {
            id: true,
          },
        },

        gameLookup: true,
        id: true,
        requestCreatedAt: true,
        requestStatus: true,
        status: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },

        userLookup: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MatchmakingRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMatchmakingRequest(
    @common.Param() params: MatchmakingRequestWhereUniqueInput,
    @common.Body() data: MatchmakingRequestUpdateInput
  ): Promise<MatchmakingRequest | null> {
    try {
      return await this.service.updateMatchmakingRequest({
        where: params,
        data: {
          ...data,

          game: data.game
            ? {
                connect: data.game,
              }
            : undefined,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          createdAt: true,

          game: {
            select: {
              id: true,
            },
          },

          gameLookup: true,
          id: true,
          requestCreatedAt: true,
          requestStatus: true,
          status: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },

          userLookup: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MatchmakingRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMatchmakingRequest(
    @common.Param() params: MatchmakingRequestWhereUniqueInput
  ): Promise<MatchmakingRequest | null> {
    try {
      return await this.service.deleteMatchmakingRequest({
        where: params,
        select: {
          createdAt: true,

          game: {
            select: {
              id: true,
            },
          },

          gameLookup: true,
          id: true,
          requestCreatedAt: true,
          requestStatus: true,
          status: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },

          userLookup: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
