/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { MatchmakingRequest } from "./MatchmakingRequest";
import { MatchmakingRequestCountArgs } from "./MatchmakingRequestCountArgs";
import { MatchmakingRequestFindManyArgs } from "./MatchmakingRequestFindManyArgs";
import { MatchmakingRequestFindUniqueArgs } from "./MatchmakingRequestFindUniqueArgs";
import { CreateMatchmakingRequestArgs } from "./CreateMatchmakingRequestArgs";
import { UpdateMatchmakingRequestArgs } from "./UpdateMatchmakingRequestArgs";
import { DeleteMatchmakingRequestArgs } from "./DeleteMatchmakingRequestArgs";
import { Game } from "../../game/base/Game";
import { User } from "../../user/base/User";
import { MatchmakingRequestService } from "../matchmakingRequest.service";
@graphql.Resolver(() => MatchmakingRequest)
export class MatchmakingRequestResolverBase {
  constructor(protected readonly service: MatchmakingRequestService) {}

  async _matchmakingRequestsMeta(
    @graphql.Args() args: MatchmakingRequestCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MatchmakingRequest])
  async matchmakingRequests(
    @graphql.Args() args: MatchmakingRequestFindManyArgs
  ): Promise<MatchmakingRequest[]> {
    return this.service.matchmakingRequests(args);
  }

  @graphql.Query(() => MatchmakingRequest, { nullable: true })
  async matchmakingRequest(
    @graphql.Args() args: MatchmakingRequestFindUniqueArgs
  ): Promise<MatchmakingRequest | null> {
    const result = await this.service.matchmakingRequest(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MatchmakingRequest)
  async createMatchmakingRequest(
    @graphql.Args() args: CreateMatchmakingRequestArgs
  ): Promise<MatchmakingRequest> {
    return await this.service.createMatchmakingRequest({
      ...args,
      data: {
        ...args.data,

        game: args.data.game
          ? {
              connect: args.data.game,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => MatchmakingRequest)
  async updateMatchmakingRequest(
    @graphql.Args() args: UpdateMatchmakingRequestArgs
  ): Promise<MatchmakingRequest | null> {
    try {
      return await this.service.updateMatchmakingRequest({
        ...args,
        data: {
          ...args.data,

          game: args.data.game
            ? {
                connect: args.data.game,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MatchmakingRequest)
  async deleteMatchmakingRequest(
    @graphql.Args() args: DeleteMatchmakingRequestArgs
  ): Promise<MatchmakingRequest | null> {
    try {
      return await this.service.deleteMatchmakingRequest(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Game, {
    nullable: true,
    name: "game",
  })
  async getGame(
    @graphql.Parent() parent: MatchmakingRequest
  ): Promise<Game | null> {
    const result = await this.service.getGame(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(
    @graphql.Parent() parent: MatchmakingRequest
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
